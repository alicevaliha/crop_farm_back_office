{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/react-results/crop-farm/src/component/box/nav/Navbox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport Logo from \"../../elements/logo/Logo.js\";\nimport Navbutton from \"../../elements/button/Navbutton.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbox = () => {\n  _s();\n  const [isNavOpen, setIsNavOpen] = useState(true); // État pour suivre l'état de la fenêtre de navigation\n\n  // Utilisez useEffect pour écouter les événements de redimensionnement de la fenêtre\n  useEffect(() => {\n    function handleResize() {\n      // Met à jour l'état en fonction de la largeur actuelle de la fenêtre\n      setIsNavOpen(window.innerWidth > 768); // Par exemple, 768 est la largeur à partir de laquelle vous souhaitez masquer la Navbox\n    }\n\n    // Ajoute un écouteur d'événements pour le redimensionnement de la fenêtre\n    window.addEventListener(\"resize\", handleResize);\n\n    // Nettoie l'écouteur d'événements lors du démontage du composant\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // Assurez-vous de passer un tableau vide pour exécuter useEffect uniquement une fois lors du montage du composant\n\n  return (\n    // Rend la Navbox seulement si isNavOpen est vrai\n    isNavOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navButtonsContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Navbutton, {\n            buttonText: \"Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Navbutton, {\n            buttonText: \"Categorie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Navbutton, {\n            buttonText: \"Autre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Navbutton, {\n            buttonText: \"Autre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(Navbox, \"1f8YMngeQwo39XaX87WZybTKdMY=\");\n_c = Navbox;\nexport default Navbox;\nvar _c;\n$RefreshReg$(_c, \"Navbox\");","map":{"version":3,"names":["React","useState","useEffect","Logo","Navbutton","jsxDEV","_jsxDEV","Navbox","_s","isNavOpen","setIsNavOpen","handleResize","window","innerWidth","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","_c","$RefreshReg$"],"sources":["/Users/macbook/Documents/react-results/crop-farm/src/component/box/nav/Navbox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport Logo from \"../../elements/logo/Logo.js\";\nimport Navbutton from \"../../elements/button/Navbutton.js\";\n\nconst Navbox = () => {\n  const [isNavOpen, setIsNavOpen] = useState(true); // État pour suivre l'état de la fenêtre de navigation\n\n  // Utilisez useEffect pour écouter les événements de redimensionnement de la fenêtre\n  useEffect(() => {\n    function handleResize() {\n      // Met à jour l'état en fonction de la largeur actuelle de la fenêtre\n      setIsNavOpen(window.innerWidth > 768); // Par exemple, 768 est la largeur à partir de laquelle vous souhaitez masquer la Navbox\n    }\n\n    // Ajoute un écouteur d'événements pour le redimensionnement de la fenêtre\n    window.addEventListener(\"resize\", handleResize);\n\n    // Nettoie l'écouteur d'événements lors du démontage du composant\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // Assurez-vous de passer un tableau vide pour exécuter useEffect uniquement une fois lors du montage du composant\n\n  return (\n    // Rend la Navbox seulement si isNavOpen est vrai\n    isNavOpen && (\n      <div className=\"navbox\">\n        {/* Place the logo */}\n        <div className=\"logo\">\n          <Logo />\n        </div>\n        <div className=\"content\">\n          {/* Vos autres éléments de navigation ici */}\n          <div className=\"navButtonsContainer\">\n            <Navbutton buttonText=\"Dashboard\" />\n            <Navbutton buttonText=\"Categorie\" />\n            <Navbutton buttonText=\"Autre\" />\n            <Navbutton buttonText=\"Autre\" />\n          </div>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Navbox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,SAAS,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,SAASS,YAAYA,CAAA,EAAG;MACtB;MACAD,YAAY,CAACE,MAAM,CAACC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC;IACzC;;IAEA;IACAD,MAAM,CAACE,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXC,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;IACE;IACAF,SAAS,iBACPH,OAAA;MAAKU,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBAErBX,OAAA;QAAKU,SAAS,EAAC,MAAM;QAAAC,QAAA,eACnBX,OAAA,CAACH,IAAI;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNf,OAAA;QAAKU,SAAS,EAAC,SAAS;QAAAC,QAAA,eAEtBX,OAAA;UAAKU,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAClCX,OAAA,CAACF,SAAS;YAACkB,UAAU,EAAC;UAAW;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpCf,OAAA,CAACF,SAAS;YAACkB,UAAU,EAAC;UAAW;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpCf,OAAA,CAACF,SAAS;YAACkB,UAAU,EAAC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChCf,OAAA,CAACF,SAAS;YAACkB,UAAU,EAAC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACN;AAEL,CAAC;AAACb,EAAA,CAvCID,MAAM;AAAAgB,EAAA,GAANhB,MAAM;AAyCZ,eAAeA,MAAM;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}