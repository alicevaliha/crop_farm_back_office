{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/react-results/crop-farm/src/component/card/statbox/Graphbox.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graphbox = ({\n  datasource\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!datasource || !Array.isArray(datasource) || datasource.length === 0) {\n      return; // Ne rien faire si datasource est vide ou non défini\n    }\n    const labels = datasource.map(entry => entry.plante);\n    const data = datasource.map(entry => entry.utilisation);\n    const backgroundColors = generateRandomColors(datasource.length);\n    const doughnutData = {\n      labels: labels,\n      datasets: [{\n        label: \"Statistiques des plantes\",\n        data: data,\n        backgroundColor: backgroundColors,\n        hoverBackgroundColor: backgroundColors\n      }]\n    };\n    const myChart = new Chart(chartRef.current, {\n      type: \"doughnut\",\n      data: doughnutData\n    });\n    return () => {\n      myChart.destroy();\n    };\n  }, [datasource]);\n\n  // Générateur de couleurs aléatoires\n  const generateRandomColors = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n      colors.push(color);\n    }\n    return colors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"float-bloc-graph\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"greet\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: \"Statistiques du mois\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subtitle\",\n        children: \"Statistiques des plantes utilis\\xE9es/plant\\xE9es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: {},\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Graphbox, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = Graphbox;\nexport default Graphbox;\nvar _c;\n$RefreshReg$(_c, \"Graphbox\");","map":{"version":3,"names":["React","useEffect","useRef","Doughnut","jsxDEV","_jsxDEV","Graphbox","datasource","_s","chartRef","Array","isArray","length","labels","map","entry","plante","data","utilisation","backgroundColors","generateRandomColors","doughnutData","datasets","label","backgroundColor","hoverBackgroundColor","myChart","Chart","current","type","destroy","count","colors","i","color","Math","floor","random","toString","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/macbook/Documents/react-results/crop-farm/src/component/card/statbox/Graphbox.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport \"./index.css\";\n\nconst Graphbox = ({ datasource }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (!datasource || !Array.isArray(datasource) || datasource.length === 0) {\n      return; // Ne rien faire si datasource est vide ou non défini\n    }\n\n    const labels = datasource.map(entry => entry.plante);\n    const data = datasource.map(entry => entry.utilisation);\n\n    const backgroundColors = generateRandomColors(datasource.length);\n\n    const doughnutData = {\n      labels: labels,\n      datasets: [\n        {\n          label: \"Statistiques des plantes\",\n          data: data,\n          backgroundColor: backgroundColors,\n          hoverBackgroundColor: backgroundColors,\n        },\n      ],\n    };\n\n    const myChart = new Chart(chartRef.current, {\n      type: \"doughnut\",\n      data: doughnutData,\n    });\n\n    return () => {\n      myChart.destroy();\n    };\n  }, [datasource]);\n\n  // Générateur de couleurs aléatoires\n  const generateRandomColors = (count) => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n      colors.push(color);\n    }\n    return colors;\n  };\n\n  return (\n    <div className=\"float-bloc-graph\">\n      <div className=\"greet\">\n        <div className=\"title\">Statistiques du mois</div>\n        <div className=\"subtitle\">Statistiques des plantes utilisées/plantées</div>\n      </div>\n      <Doughnut data={{}} ref={chartRef} />\n    </div>\n  );\n};\n\nexport default Graphbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}